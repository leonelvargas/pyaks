#Namespace
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    scheduler.alpha.kubernetes.io/node-selector: "env=Pyplan"
  name: pyplan
---
apiVersion: v1
kind: Secret
metadata:
  name: pyplan-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJweXBsYW5kb2NrZXIiLCJwYXNzd29yZCI6IlB5cGw0bkQwY2szciIsImVtYWlsIjoiZmJydXNzYUBub3ZpeC5jb20iLCJhdXRoIjoiY0hsd2JHRnVaRzlqYTJWeU9sQjVjR3cwYmtRd1kyc3pjZz09In19fQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: pyplan.env-secret
type: Opaque
data:
  DJANGO_SECRET_KEY: dTNhU3k2KnZ2QyY4c2hpLTNrcHE2aWkyckBnYV5rcjJ2MDJqYjdsY2hhJSgpdGRd
  DJANGO_SECRET_KEY_ENGINE: dTMhYSZ5Nip2diUmOHNoaS0za3BxNmlpMnJAZ2FeayFyMnYwMmpiN2xjaGElKCl0ZCk=
  PGDATABASE: cHlwbGFuX2Ri
  PGUSER: cHlwbGFuX2RiX3VzZXI=
  PGPASSWORD: Tm92aXgxMjM0NTY= 
  REDIS_PASSWORD: bnZ4LjIwMjAh
---
#Config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: pyplan-config
data:
  SESSION_TIMEOUT: "1800"
  TIMEOUT_FOR_PROCESSING_IN_HOURS: "4"
  DAPHNE_NUM_PROCS: "4"

  PGHOST: pyplanpg.postgres.database.azure.com
  PGPORT: "5432"
    
  REDIS_HOST: pyplan-redis-svc
  REDIS_PORT: "6379"
  REDIS_DB: "0"

  CELERY_LOG_LEVEL: INFO

  DJANGO_SERVER_LOG_LVL: INFO
  DJANGO_REQUEST_LOG_LVL: ERROR
  DJANGO_DB_BACKENDS_LOG_LVL: INFO
  DJANGO_PYPLAN_LOG_LVL: DEBUG  

  PYPLAN_API_HOST: http://pyplan-api-svc:8000/api
  
  ENGINE_MODE: kubernetes
  ENGINE_START_GRACE_SECONDS: "360"
  DJANGO_CONFIGURATION: Production

  PYPLAN_VERSION: "2.2.20"
  KUBERNETES_NAMESPACE: pyplan
---
#Configmap for nginx -> api
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    resolver 127.0.0.11 ipv6=off;

    server {
      listen 9000;
      server_name localhost;
  
      client_max_body_size 2048M;
      rewrite_log on;

      location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }
---      
#Service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyplan-exec
automountServiceAccountToken: true
---
# Cluster role
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pyplan-pod-manager
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# Role binding
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pyplanrolebinding
subjects:
- kind: ServiceAccount
  name: pyplan-exec
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: pyplan-pod-manager
  apiGroup: rbac.authorization.k8s.io
---  
#Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pyplan-data-claim
  labels:
    app: pyplan-data
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: azurefile-premium
  resources:
    requests:
      storage: 100Gi
---
# REDIS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyplan-redis
spec:
  selector:
    matchLabels:
      app: pyplan-redis
  template:
    metadata:
      labels:
        app: pyplan-redis
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
      - name: pyplanredis
        image: redis:alpine
        resources:
          requests:
            memory: "70Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
            cpu: "100m"
        command: ["/bin/sh"]
        args: ["-c", "redis-server --requirepass ${REDIS_PASSWORD}"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
        envFrom:
          - secretRef:
              name: pyplan.env-secret
          - configMapRef:
              name: pyplan-config
---
# pyplan-redis Service
apiVersion: v1
kind: Service
metadata:
  name: pyplan-redis-svc
  labels:
    app: pyplan-redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: pyplan-redis
  type: ClusterIP            
---
# PYPLAN-API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyplan-api
  labels:
    app: pyplan-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pyplan-api
  template:
    metadata:
      labels:
        app: pyplan-api
    spec:
      serviceAccountName: pyplan-exec
      containers:
      - name: pyplanapi
        image: pyplan/pyplan_api:2.2.20.kubernetes
        resources:
          requests:
            memory: "2Gi"
            cpu: "300m"
          limits:
            memory: "4Gi"
            cpu: "500m"
        command: ["/bin/sh"]
        args: ["-c", ". /venv/bin/activate && python wait_for_postgres.py && ./manage.py migrate && rm -f /supervisor/daphne*.soc* && supervisord --nodaemon -c /code/config/supervisord.conf"]
        envFrom:
          - secretRef:
              name: pyplan.env-secret
          - configMapRef:
              name: pyplan-config
        env:
        - name: REDIS_HOST
          value: $(PYPLAN_REDIS_SVC_SERVICE_HOST)
        ports:
        - name: api-port
          containerPort: 8000
        livenessProbe:
          httpGet:
            path: /api/healthcheck/
            port: api-port
          initialDelaySeconds: 60
          timeoutSeconds: 20
          periodSeconds: 30
          failureThreshold: 3
        volumeMounts:
        - mountPath: /data
          name: pyplan-data-vol
      initContainers:
      - name: init-folders
        image: busybox:1.28
        command: 
        - sh
        - -c
        - "if [ -d '/data/logs/api' ]; then echo '..ok'; else mkdir -p /data/logs/api; fi;
          if [ -d '/data/logs/engine' ]; then echo '..ok'; else mkdir -p /data/logs/engine; fi;
          if [ -d '/data/models' ]; then echo '..ok'; else mkdir -p /data/models; fi;
          if [ -d '/data/tmp' ]; then echo '..ok'; else mkdir -p /data/tmp; fi;
          if [ -d '/data/forms' ]; then echo '..ok'; else mkdir -p /data/forms; fi;
          if [ -d '/data/db' ]; then echo '..ok'; else mkdir -p /data/db; fi;
          exit 0"
        volumeMounts:
        - mountPath: /data
          name: pyplan-data-vol
      imagePullSecrets:
      - name: pyplan-secret
      volumes:
        - name: pyplan-data-vol
          persistentVolumeClaim:
            claimName: pyplan-data-claim
---
# PYPLAN-Celery Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyplan-celery
  labels:
    app: pyplan-celery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pyplan-celery
  template:
    metadata:
      labels:
        app: pyplan-celery
    spec:
      serviceAccountName: pyplan-exec
      containers:
      - name: pyplancelery
        image: pyplan/pyplan_api:2.2.20.kubernetes
        resources:
          requests:
            memory: "1Gi"
            cpu: "50m"
          limits:
            memory: "2Gi"
            cpu: "100m"
        command: ["/bin/sh"]
        args: ["-c", ". /venv/bin/activate && python wait_for_postgres.py && supervisord --nodaemon -c /code/config/supervisord-celery.conf"]
        envFrom:
          - secretRef:
              name: pyplan.env-secret
          - configMapRef:
              name: pyplan-config
        env:
        - name: REDIS_HOST
          value: $(PYPLAN_REDIS_SVC_SERVICE_HOST)
        volumeMounts:
        - mountPath: /data
          name: pyplan-data-vol
      imagePullSecrets:
      - name: pyplan-secret
      volumes:
        - name: pyplan-data-vol
          persistentVolumeClaim:
            claimName: pyplan-data-claim
---
# pyplan-api Service
apiVersion: v1
kind: Service
metadata:
  name: pyplan-api-svc
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: pyplan-api
---                
# pyplan-ui Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyplan-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pyplan-ui
  template:
    metadata:
      labels:
        app: pyplan-ui
    spec:
      containers:
      - name: pyplan-ui
        image: pyplan/pyplan_ui:2.2.20
        resources:
          requests:
            memory: "70Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
            cpu: "100m"
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      imagePullSecrets:
      - name: pyplan-secret
---
# pyplan-ui service
apiVersion: v1
kind: Service
metadata:
  name: pyplan-ui-svc  
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
  selector:
    app: pyplan-ui
---
# Main ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pyplan-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    # this one annotation is making the websocket work.
    nginx.ingress.kubernetes.io/websocket-services: pyplan-api-svc

    # by default ssl is true - as I am trying locally and want to disable ssl-# redirect. So set this to false.
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Below are just additional annotation to allow CORS etc.
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "14400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "14400"
    
    #Cert-manager Annotation. Uncomment the following line if Letsencrypt is necessary and set force-ssl-redirect: "true"
    #cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  # Enable this for use SSL. secretName could be one of these possibilities:
  # 1) An autogenerated Cert-Manager secret 
  # 2) A secret created with (cert.key and cert.pem). These files must be found in /pyplan/cert 
  #tls:
  #- hosts:
  #  - pyplan.fullfilment-app.com
  #  secretName: pyplan-tls
  rules:
  #- host: pyplan.fullfilment-app.com
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: pyplan-api-svc
            port:
              number: 8000
      - path: /ws/
        pathType: Prefix
        backend:
          service:
            name: pyplan-api-svc
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pyplan-ui-svc
            port:
              number: 9000
